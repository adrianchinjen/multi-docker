# this sets up the definition of an upstream called client
# and then inside of here we're gonna say that
# it refers to a server that is hosted at client:3000,
# the syntax here says
# there is a upstream, we are calling it client,
# it is located at the domain name
# or the URL client port 3000.
# This right here is how you can access it.

upstream client {
  server client:3000;
}

upstream api {
  server api:5000;
}

server {
  listen 80;

  location / {
    proxy_pass http://client;
  }

  location /ws {
      proxy_pass http://client;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "Upgrade";
  }

  location /api {
    # this is a rewrite directive or a rewrite rule, it means apply a reg X of /API,
    # so essentially match this reg X right here against the path name,
    # and if we match anything to this then take off the /API and leave it as just /$1.
    # The $1 right here is actually a reference to whatever text was matched by this Reg X right here,
    # so essentially whatever gets matched will be added or resubstituted in here as $1.
    # The break keyword on the very end is a directive and it essentially means,
    # do not try to apply any other rewrite rules after applying this one.
    # So, if we had other rules in place to rewrite the URL or the path name here, the break keyword essentially means,
    # "Hey, Nginx, don't try to do any other rewrite here." The reason you put in break right here is essentially to keep from going through continuous rules
    # as Nginx rewrites the URL and then tries to match it to a new route with the new rewritten url.
    rewrite /api/(.*) /$1 break;
    proxy_pass http://api;
  }
}